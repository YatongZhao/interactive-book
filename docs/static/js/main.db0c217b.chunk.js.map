{"version":3,"sources":["Chapter.tsx","store/index.ts","App.tsx","reportWebVitals.ts","store/book.ts","store/chapter.ts","index.tsx"],"names":["AddChapter","data","useState","open","setOpen","title","setTitle","author","setAuthor","content","setContent","handleClose","Button","variant","color","disableElevation","size","onClick","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","value","onChange","e","target","label","fullWidth","multiline","rowsMax","DialogActions","addSub","useChapterBoxStyles","makeStyles","theme","createStyles","fontWeight","marginBottom","spacing","padding","width","textAlign","justifyContent","marginLeft","palette","grey","paddingLeft","selectorContainer","marginTop","ChapterBox","onClickTitle","classes","selectedSubChapterId","setSelectedSubChapterId","selectedSubChapter","setSelectedSubChapter","showSelector","setShowSelector","useEffect","sub","find","item","id","ButtonBase","className","Box","component","length","FormControl","FormLabel","RadioGroup","map","FormControlLabel","control","Radio","StoreContext","createContext","StoreProvider","Provider","useStyles","flexGrow","container","App","store","useContext","AppBar","position","Toolbar","Typography","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Book","source","this","uuidv4","Chapter","makeObservable","observable","action","push","window","localStorage","getItem","JSON","parse","autorun","setItem","stringify","ReactDOM","render","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.db0c217b.chunk.js","sourcesContent":["import { Box, Button, ButtonBase, createStyles, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl, FormControlLabel, FormLabel, makeStyles, Radio, RadioGroup, TextField, Theme } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { Chapter } from './store/chapter';\nimport { Observer } from 'mobx-react';\n\nconst AddChapter = ({ data }: {\n    data: Chapter\n}) => {\n    const [open, setOpen] = useState(false);\n    const [title, setTitle] = useState('');\n    const [author, setAuthor] = useState('');\n    const [content, setContent] = useState('');\n\n    const handleClose = () => setOpen(false);\n\n    const handleSubscribe = () => {\n        data.addSub({\n            title, author, content\n        });\n        setOpen(false);\n    }\n\n    return <>\n        <Button variant=\"contained\" color=\"default\" disableElevation size=\"small\" onClick={() => setOpen(true)}>在当前位置添加一个章节</Button>\n        <Dialog onClose={handleClose} open={open}>\n            <DialogTitle>添加一个章节</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    在当前位置，添加一个章节选择\n                </DialogContentText>\n                <TextField\n                    autoFocus\n                    value={title}\n                    onChange={e => setTitle(e.target.value)}\n                    label=\"标题\"\n                    fullWidth\n                />\n                <TextField\n                    autoFocus\n                    value={author}\n                    onChange={e => setAuthor(e.target.value)}\n                    label=\"作者\"\n                    fullWidth\n                />\n                <TextField\n                    autoFocus\n                    value={content}\n                    onChange={e => setContent(e.target.value)}\n                    label=\"内容\"\n                    fullWidth\n                    multiline\n                    rowsMax={10}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleSubscribe} color=\"primary\">\n                    确定\n                </Button>\n                <Button onClick={handleClose} color=\"primary\">\n                    取消\n                </Button>\n            </DialogActions>\n        </Dialog>\n    </>;\n}\n\nconst useChapterBoxStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        title: {\n            fontWeight: 700,\n            marginBottom: theme.spacing(0.5),\n            padding: theme.spacing(1),\n            width: '100%',\n            textAlign: 'left',\n            justifyContent: 'flex-start',\n        },\n        author: {\n            fontWeight: 400,\n            marginLeft: theme.spacing(1),\n            color: theme.palette.grey[400],\n        },\n        content: {\n            paddingLeft: theme.spacing(3),\n            marginBottom: theme.spacing(1.5),\n        },\n        selectorContainer: {\n            paddingLeft: theme.spacing(3),\n            marginTop: theme.spacing(2),\n            marginBottom: theme.spacing(2),\n        }\n    })\n);\n\nexport const ChapterBox = ({ data, onClickTitle }: {\n    data: Chapter;\n    onClickTitle?: Function;\n}) => {\n    const classes = useChapterBoxStyles();\n    const [selectedSubChapterId, setSelectedSubChapterId] = useState('');\n    const [selectedSubChapter, setSelectedSubChapter] = useState<Chapter | null>(null);\n    const [showSelector, setShowSelector] = useState(false);\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setSelectedSubChapterId(e.target.value);\n        setShowSelector(false);\n    }\n\n    useEffect(() => {\n        setSelectedSubChapter(data.sub.find(item => item.id === selectedSubChapterId) || null);\n    }, [selectedSubChapterId, data]);\n\n    return <>\n        <ButtonBase className={classes.title} onClick={() => onClickTitle && onClickTitle()}>\n            {data.title}\n            <Box className={classes.author} component=\"span\">author: {data.author}</Box>\n        </ButtonBase>\n        <Box className={classes.content}>{data.content}</Box>\n        <Box className={classes.selectorContainer}>\n            {(!selectedSubChapterId || showSelector) && <>\n                {data.sub.length !== 0 && <FormControl component=\"fieldset\" fullWidth>\n                    <FormLabel component=\"legend\">选择一条分支</FormLabel>\n                    <RadioGroup value={selectedSubChapterId} onChange={handleChange}>\n                        <Observer>\n                            {() => <>\n                                {data.sub.map(item => <FormControlLabel\n                                    key={item.id} value={item.id} control={<Radio size=\"small\"/>} label={item.title}/>)}\n                            </>}\n                        </Observer>\n                    </RadioGroup>\n                </FormControl>}\n                <AddChapter data={data} />\n            </>}\n        </Box>\n        {selectedSubChapter &&\n            <ChapterBox key={selectedSubChapter.id} data={selectedSubChapter}\n            onClickTitle={() => setShowSelector(!showSelector)} />}\n    </>;\n}","import { createContext } from 'react';\nimport { Book } from './book';\n\nexport const StoreContext = createContext<Book>({} as Book);\nexport const StoreProvider = StoreContext.Provider;\n","import classes from '*.module.css';\nimport { AppBar, Box, Container, createStyles, makeStyles, Theme, Toolbar, Typography } from '@material-ui/core';\nimport { Observer } from 'mobx-react';\nimport React, { useContext } from 'react';\nimport { ChapterBox } from './Chapter';\nimport { StoreContext } from './store';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      flexGrow: 1\n    },\n    container: {\n      marginTop: theme.spacing(3),\n    }\n  })\n);\n\nfunction App() {\n  const classes = useStyles();\n  const store = useContext(StoreContext);\n\n  return <Box>\n    <AppBar position=\"sticky\">\n      <Toolbar variant=\"dense\">\n        <Typography variant=\"h6\" className={classes.title}>\n          my book\n        </Typography>\n      </Toolbar>\n    </AppBar>\n    <Container className={classes.container}>\n      <Observer>\n        {() => <ChapterBox data={store} />}\n      </Observer>\n    </Container>\n  </Box>;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Chapter } from './chapter';\n\nexport class Book extends Chapter {\n    constructor(source: any) {\n        super(source);\n    }\n};\n","import { action, makeObservable, observable } from 'mobx';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport class Chapter {\n    public title: string = '';\n    public author: string = '';\n    public content: string = '';\n    public sub: Chapter[] = [];\n    public id: string = '';\n\n    constructor(source: any) {\n        this.id = source.id || uuidv4();\n        this.title = source.title;\n        this.author = source.author;\n        this.content = source.content;\n        this.sub = (source.sub || []).map((source: any) => new Chapter(source));\n\n        makeObservable(this, {\n            title: observable,\n            author: observable,\n            content: observable,\n            sub: observable,\n            addSub: action,\n        });\n    }\n\n    addSub(source: {\n        title: string;\n        author: string;\n        content: string;\n    }) {\n        this.sub.push(new Chapter(source));\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { autorun } from 'mobx';\nimport { StoreProvider } from './store';\nimport { CssBaseline } from '@material-ui/core';\nimport { Book } from './store/book';\n\nconst source = window.localStorage.getItem('interactive-book-store');\nconst data = new Book(JSON.parse(source as any) || {\n  title: 'First Book Of Universe',\n  author: 'me',\n  content: 'Boommmmmm',\n  sub: []\n});\n\nautorun(() => {\n  localStorage.setItem('interactive-book-store', JSON.stringify(data));\n});\n\nReactDOM.render(\n  <StoreProvider value={data}>\n    <CssBaseline />\n    <App />\n  </StoreProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}